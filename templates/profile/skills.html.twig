{% extends 'base.html.twig' %}

{% block title %}Mes Compétences - Entr'Aide 2.0
{% endblock %}

{% block stylesheets %}
	{{ parent() }}
	<style>:root
	{
		--primary-color: #4CAF50;
		--primary-hover: #45a049;
		--primary-light: #C8E6C9;
		--danger-color: #F44336;
		--danger-light: #FFCDD2;
	}

	.text-primary-custom {
		color: var(--primary-color) !important;
	}
	.bg-primary-custom {
		background-color: var(--primary-color) !important;
	}
	.border-primary-custom {
		border-color: var(--primary-color) !important;
	}
	.btn-primary-custom {
		background-color: var(--primary-color);
		border-color: var(--primary-color);
		color: white;
		transition: all 0.3s ease;
	}
	.btn-primary-custom:hover {
		background-color: var(--primary-hover);
		border-color: var(--primary-hover);
		transform: translateY(-1px);
	}
	.btn-outline-primary-custom {
		border-color: var(--primary-color);
		color: var(--primary-color);
		transition: all 0.3s ease;
	}
	.btn-outline-primary-custom:hover {
		background-color: var(--primary-color);
		color: white;
	}
	.alert-info-custom {
		background-color: var(--primary-light) !important;
		border-color: var(--primary-color) !important;
		color: #2e7d32 !important;
	}
	.skill-pill {
		background-color: var(--primary-light);
		color: var(--primary-color);
	}
	.accordion-button {
		background-color: white;
		border: 1px solid #dee2e6;
		border-radius: 8px !important;
		padding: 0.75rem 1rem;
		font-weight: 500;
	}
	.accordion-button:focus {
		box-shadow: none;
		border-color: var(--primary-color);
	}
	.accordion-button:not(.collapsed) {
		background-color: #f8f9fa;
		color: var(--primary-color);
	}
</style>{% endblock %}{% block body %}
<div class="container py-5">
	<div class="row justify-content-center">
		<div class="col-lg-10">
			<div
				class="card shadow-sm border-primary-custom">
				<!-- En-tête -->
				<div class="card-header bg-primary-custom text-white py-3 d-flex justify-content-between align-items-center">
					<h1 class="h4 mb-0">
						<i class="bi bi-patch-check me-2"></i>
						Gestion de mes compétences
					</h1>
					<a href="{{ path('app_profile_index') }}" class="btn btn-outline-light btn-sm">
						<i class="bi bi-arrow-left me-1"></i>
						Retour
					</a>
				</div>

				<div
					class="card-body">
					<!-- Formulaire d'ajout -->
					<div class="mb-5">
						{{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate'}}) }}
						{# Affichage des erreurs globales du formulaire #}
						{% if not form.vars.valid %}
							{% set non_csrf_errors = [] %}
							{% for error in form.vars.errors %}
								{# Filtrer les erreurs CSRF par leur message #}
								{% if not (error.message starts with 'The CSRF token is invalid.') %}
									{% set non_csrf_errors = non_csrf_errors|merge([error]) %}
								{% endif %}
							{% endfor %}

							{% if non_csrf_errors|length > 0 %}
								<div class="alert alert-danger alert-dismissible fade show mb-4">
									<button type="button" class="btn-close" data-bs-dismiss="alert"></button>
									{% for error in non_csrf_errors %}
										<div>{{ error.message }}</div>
									{% endfor %}
								</div>
							{% endif %}
						{% endif %}
						<div class="row g-3 align-items-end">
							<div class="col-md-6">
								<div class="form-group">
									{{ form_label(form.category, 'Catégorie', {'label_attr': {'class': 'form-label fw-medium'}}) }}
									<div class="input-group">
										<span class="input-group-text bg-primary-custom text-white">
											<i class="bi bi-tag"></i>
										</span>
										{{ form_widget(form.category, {
                                            'attr': {
                                                'class': 'form-select' ~ (form.category.vars.errors|length ? ' is-invalid'),
                                                'data-controller': 'category-selector',
                                                'data-category-selector-category-target': '',
                                                'data-action': 'change->category-selector#changeCategory'
                                            }
                                        }) }}
									</div>
									<small id="categoryHelp" class="form-text text-muted">Sélectionnez une catégorie</small>
									<div class="invalid-feedback">
										{{ form_errors(form.category) }}
									</div>
								</div>
							</div>

							<div class="col-md-6">
								<div class="form-group">
									{{ form_label(form.skill, 'Compétence', {'label_attr': {'class': 'form-label fw-medium'}}) }}
									<div class="input-group has-validation">
										<span class="input-group-text bg-primary-custom text-white">
											<i class="bi bi-search"></i>
										</span>
										{{ form_widget(form.skill, {
                                            'attr': {
                                                'class': 'form-control' ~ (form.skill.vars.errors|length ? ' is-invalid'),
                                                'data-category-selector-skill-target': ''
                                            }
                                        }) }}
										<button type="submit" class="btn btn-primary-custom" id="skill-submit-btn">
											<i class="bi bi-plus-lg me-1"></i>
											Ajouter
										</button>
									</div>
									<small id="skillHelp" class="form-text text-muted">Choisissez une compétence dans la liste</small>
									<div class="invalid-feedback">
										{{ form_errors(form.skill) }}
									</div>
								</div>
							</div>
						</div>
						{{ form_end(form) }}
					</div>

					<!-- Liste des compétences -->
					<div class="mt-4">
						<h2 class="h5 mb-3 text-primary-custom">
							<i class="bi bi-list-check me-2"></i>
							Mes compétences actuelles
						</h2>

						{% if app.user.skills|length > 0 %}
							<div class="dynamic-skills-list">
								<div class="accordion" id="skillsAccordion">
									{% for category, skills in app.user.getSkillsByCategory() %}
										{% set category_slug = category|u.ascii.snake|replace({'_': '-'})|lower %}
										<div class="accordion-item">
											<h3 class="accordion-header" id="heading{{ category_slug }}">
												<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse{{ category_slug }}">
													{{ category }}
													<span class="badge bg-primary-custom ms-2">{{ skills|length }}</span>
												</button>
											</h3>
											<div id="collapse{{ category_slug }}" class="accordion-collapse collapse">
												<div class="accordion-body">
													<div class="d-flex flex-wrap gap-2">
														{% for skill in skills %}
															<div class="skill-pill rounded-pill p-2 d-flex align-items-center">
																<span class="me-2">{{ skill.name }}</span>
																<form method="post" action="{{ path('app_profile_skill_remove', {'id': skill.id}) }}" class="d-inline">
																	<input type="hidden" name="_method" value="DELETE">
																	<input type="hidden" name="_token" value="{{ csrf_token('delete' ~ skill.id) }}">
																	<button type="submit" class="btn btn-link text-danger p-0" aria-label="Supprimer {{ skill.name }}" onclick="return confirm('Êtes-vous sûr de vouloir supprimer cette compétence ?')">
																		<i class="bi bi-x-lg"></i>
																	</button>
																</form>
															</div>
														{% endfor %}
													</div>
												</div>
											</div>
										</div>
									{% endfor %}
								</div>
							</div>
						{% else %}
							<div class="alert alert-info-custom mb-0">
								<i class="bi bi-info-circle me-2"></i>
								Vous n'avez aucune compétence enregistrée
							</div>
						{% endif %}
					</div>
				</div>
			</div>
		</div>
	</div>
</div>{% endblock %}{% block javascripts %}
{{ parent() }}
<script>
	document.addEventListener('DOMContentLoaded', function () {
const categorySelect = document.querySelector('[name="skill_selection[category]"]');
const skillSelect = document.querySelector('[name="skill_selection[skill]"]');
const submitBtn = document.getElementById('skill-submit-btn');

function updateButtonState() { // Activer le bouton seulement si une compétence est sélectionnée
submitBtn.disabled = ! skillSelect.value;

// Supprimer les classes d'erreur si une compétence est sélectionnée
if (skillSelect.value) {
skillSelect.classList.remove('is-invalid');
skillSelect.parentElement.querySelector('.invalid-feedback').style.display = 'none';
}
}

if (skillSelect && submitBtn) {
skillSelect.addEventListener('change', updateButtonState);
updateButtonState(); // État initial au chargement
}

if (categorySelect) {
categorySelect.addEventListener('change', function () { // Soumettre le formulaire pour rafraîchir les compétences
const form = document.createElement('form');
form.method = 'POST';
form.action = '{{ path('app_profile_skills') }}';

// Ajouter le token CSRF
const csrfInput = document.createElement('input');
csrfInput.type = 'hidden';
csrfInput.name = 'skill_selection[_token]';
csrfInput.value = document.querySelector('input[name="skill_selection[_token]"]').value;
form.appendChild(csrfInput);

// Ajouter la catégorie sélectionnée
const categoryInput = document.createElement('input');
categoryInput.type = 'hidden';
categoryInput.name = 'skill_selection[category]';
categoryInput.value = this.value;
form.appendChild(categoryInput);

document.body.appendChild(form);
form.submit();
});
}
});
</script>{% endblock %}
